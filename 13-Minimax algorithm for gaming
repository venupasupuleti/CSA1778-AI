def evaluate(board):
    # Function to evaluate the current state of the board
    # Returns +10 if the AI wins, -10 if the player wins, 0 for a draw
    # and None if the game is still ongoing.
    
    # Checking rows, columns, and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2]:
            if board[i][0] == 'X':
                return -10
            elif board[i][0] == 'O':
                return 10
        
        if board[0][i] == board[1][i] == board[2][i]:
            if board[0][i] == 'X':
                return -10
            elif board[0][i] == 'O':
                return 10
    
    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == 'X':
            return -10
        elif board[0][0] == 'O':
            return 10
    
    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == 'X':
            return -10
        elif board[0][2] == 'O':
            return 10
    
    return 0

def is_moves_left(board):
    # Function to check if there are any empty cells left on the board
    for i in range(3):
        for j in range(3):
            if board[i][j] == '':
                return True
    return False

def minimax(board, depth, is_maximizing):
    # Minimax algorithm implementation
    
    score = evaluate(board)
    
    if score == 10:
        return score - depth
    
    if score == -10:
        return score + depth
    
    if not is_moves_left(board):
        return 0
    
    if is_maximizing:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == '':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ''
                    best_score = max(best_score, score)
        return best_score
    
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == '':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ''
                    best_score = min(best_score, score)
        return best_score

def find_best_move(board):
    # Function to find the best move for AI
    
    best_score = -float('inf')
    best_move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == '':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = ''
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    
    return best_move

def print_board(board):
    for row in board:
        print(' '.join(row))

def main():
    board = [['' for _ in range(3)] for _ in range(3)]
    
    while is_moves_left(board):
        print_board(board)
        
        player_row = int(input("Enter row for X: "))
        player_col = int(input("Enter column for X: "))
        
        if board[player_row][player_col] == '':
            board[player_row][player_col] = 'X'
            
            if not is_moves_left(board):
                print_board(board)
                print("It's a draw!")
                break
            
            ai_row, ai_col = find_best_move(board)
            board[ai_row][ai_col] = 'O'
            
            if evaluate(board) == -10:
                print_board(board)
                print("You win!")
                break
        else:
            print("Cell already taken. Try again.")
    
    print_board(board)
    print("Game Over")

if __name__ == "__main__":
    main()
